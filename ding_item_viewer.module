<?php
/**
 * @file
 * Main module file for item viewer.
 */

// TODO Create image styles and modify these settings.
// Style for item images.
define('DING_ITEM_VIEWER_IMAGE_STYLE_SMALL', 'medium');
// Style for active item.
define('DING_ITEM_VIEWER_IMAGE_STYLE_BIG', 'large');

/**
 * Implements hook_menu().
 */
function ding_item_viewer_menu() {
  $menu = array();

  $menu['admin/config/ding/item_viewer'] = array(
    'title' => 'Ding item viewer',
    'description' => 'Configure ding item viewer',
    'access arguments' => array('manage item viewer'),
    'page callback' => 'ding_item_viewer_admin_page',
    'page arguments' => array(),
    'file' => 'ding_item_viewer.admin.inc',
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function ding_item_viewer_permission() {
  $perm = array();

  $perm['manage item viewer'] = array(
    'title' => t('Manage ding item viewer'),
    'description' => t('Configure ding item viewer settings such as search query and cache time.'),
  );

  return $perm;
}

/**
 * Implements hook_theme().
 */
function ding_item_viewer_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['item_viewer_content'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.content',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer_item'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.item',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer_item_active'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.item_active',
    'path' => $path . '/templates',
  );

  $hooks['item_viewer_tab_single'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.single-tab',
    'path' => $path . '/templates',
  );

  $hooks['item_viewer_tabs'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.tabs',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer_admin_form'] = array(
    'render element' => 'form',
  );

  return $hooks;
}

/**
 * Implements hook_block_info().
 */
function ding_item_viewer_block_info() {
  $blocks = array();

  $blocks['item_viewer'] = array(
    'info' => t('Ding item viewer'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ding_item_viewer_block_view($delta) {
  $block = array();
  $block['content'] = '';

  switch ($delta) {
    case 'item_viewer':
      drupal_add_library('system', 'drupal.ajax');
      drupal_add_css(drupal_get_path('module', 'ding_item_viewer') . '/css/ding_item_viewer.styles.css');
      $tabs = ding_item_viewer_build_tabs();
      $output = ding_item_viewer_build_data();
      $block['content'] = theme('item_viewer_content', array('tabs' => $tabs, 'data' => $output));
      break;
  }

  return $block;
}

/**
 * Build tabs for item viewer.
 *
 * @return
 *   Tabs layout markup.
 */
function ding_item_viewer_build_tabs() {
  $queries = variable_get('ding_item_viewer_search_queries');

  $tabs = '';

  if (is_array($queries)) {
    foreach ($queries as $k => $query) {
      $tabs .= theme('item_viewer_tab_single', array('tab_index' => $k, 'tab_title' => $query['title']));
    }
  }

  return theme('item_viewer_tabs', array('tabs' => $tabs));
}

/**
 * Build ting related data.
 *
 * This entry fetches all needed objects and outputs the result as a json string
 * into JS script for further use.
 */
function ding_item_viewer_build_data() {
  $queries = variable_get('ding_item_viewer_search_queries');
  $count = variable_get('ding_item_viewer_item_limit', 24);
  $sort = variable_get('ding_item_viewer_item_sorting', '');
  $ttl = variable_get('ding_item_viewer_cache_ttl', 1);
  $output = array();

  if (is_array($queries)) {
    foreach ($queries as $query) {
      $cid = ding_item_viewer_generate_cache_id($query['query']);
      $cache = cache_get($cid, 'cache_ding_item');

      if (!$cache) {
        $objects = ding_item_viewer_get_objects($query['query'], $count, FALSE, $sort);
        cache_set($cid, $objects, 'cache_ding_item', time() + $ttl * 3600);
      }
      else {
        $objects = $cache->data;
      }

      // Check if cover images are physically present.
      try {
        ding_item_viewer_create_missed_covers($objects);
        $output[] = $objects;
      }
      catch (Exception $e) {
        // No special handling at the moment.
      }
    }

    drupal_add_js(drupal_get_path('module', 'ding_item_viewer') . '/js/ding_item_viewer.js');
    drupal_add_js(drupal_get_path('module', 'ding_reservation') . '/js/ding_reservation_scripts.js');
    drupal_add_js(array('ding_item_viewer' => array('ting_objects' => drupal_json_encode($output))), 'setting');
  }

  return $output;
}

/**
 * Get ting objects.
 *
 * @param $query
 *   Search query string.
 * @param $count
 *   Number of objects to search.
 */
function ding_item_viewer_get_objects($query = '', $count = 0, $no_cover = FALSE, $sort = '') {
  module_load_include('with_images.inc', 'ting');

  $results = ting_get_objects_with_images($query, $count, $sort, array(DING_ITEM_VIEWER_IMAGE_STYLE_BIG,DING_ITEM_VIEWER_IMAGE_STYLE_SMALL));

  foreach ($results as $search_item) {
    $item = new stdClass();
    $item->id = $search_item->getId();
    $item->local_id = $search_item->getLocalId();
    $item->isbn = $search_item->getIsbn();
    $item->ac_source = $search_item->getAcSource();
    $item->dc_source = $search_item->getSource();
    $item->title = $search_item->getTitle();
    $item->object = $search_item;
    $item->creator = $search_item->getOneOf('creator', 'creator_aut', 'creator_mus');
    $item->subject = $search_item->getOneOf('subject_dk5_text', 'subject_genre', 'subject');
    $item->description = $search_item->getOneOf('description', 'abstract', 'haspart_track');
    $item->year = $search_item->getDate();

    // Default values.
    $item->type = 1;
    $item->rating = 0;
    $item->rating_count = 0;
    $item->comment_count = 0;
    $item->has_rating = FALSE;

    $item->image = $search_item->getImage(DING_ITEM_VIEWER_IMAGE_STYLE_BIG);
    $item->image_active = $search_item->getImage(DING_ITEM_VIEWER_IMAGE_STYLE_SMALL);

    $objects[$search_item->getLocalId()] = $item;
  }

  // TODO: Get VoxB info.

  return $objects;
}


/**
 * Create missed covers.
 *
 * @param $items
 *   Set of ting objects.
 */
function ding_item_viewer_create_missed_covers(&$items) {
  module_load_include('pages.inc', 'ting_covers');

  $images = array();
  foreach ($items as $search_item) {
    // Build input for ting cover.
    $images[] = $search_item->local_id . ':' . DING_ITEM_VIEWER_IMAGE_STYLE_BIG;
    $images[] = $search_item->local_id . ':' . DING_ITEM_VIEWER_IMAGE_STYLE_SMALL;
  }

  $images = _ting_covers_objects($images);

  foreach ($items as $item) {
    $index = $item->local_id . ':' . DING_ITEM_VIEWER_IMAGE_STYLE_BIG;
    if (!empty($images[$index])) {
      $item->image_active = $images[$index];
    }
    $index = $item->local_id . ':' . DING_ITEM_VIEWER_IMAGE_STYLE_SMALL;
    if (!empty($images[$index])) {
      $item->image = $images[$index];
    }
  }

  return $images;
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param $keyword
 *   A generic keyword.
 * @return
 *   Hash string, meaning a certain cache id.
 */
function ding_item_viewer_generate_cache_id($keyword) {
  return 'ding_item_viewer-' . md5($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_viewer_ding_item_cache() {
  return array(
    'ding_item_viewer' => t('Ding item viewer'),
  );
}
