<?php
/**
 * @file
 * Main module file for item viewer.
 */

/**
 * Implements hook_menu().
 */
function ding_item_viewer_menu() {
  $menu = array();

  $menu['admin/config/ding/item_viewer'] = array(
    'title' => 'Ding item viewer',
    'description' => 'Configure ding item viewer',
    'access arguments' => array('manage item viewer'),
    'page callback' => 'ding_item_viewer_admin_page',
    'page arguments' => array(),
    'file' => 'ding_item_viewer.admin.inc'
  );

  return $menu;
}

/**
 * Implements hook_permission().
 */
function ding_item_viewer_permission() {
  $perm = array();

  $perm['manage item viewer'] = array(
    'title' => t('Manage ding item viewer'),
    'description' => t('Configure ding item viewer settings such as search query and cache time.')
  );

  return $perm;
}

/**
 * Implements hook_theme().
 */
function ding_item_viewer_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['item_viewer_content'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.content',
    'path' => $path . '/templates',
  );

  $hooks['item_viewer_tab_single'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.single-tab',
    'path' => $path . '/templates',
  );

  $hooks['item_viewer_tabs'] = array(
    'variables' => array(),
    'template' => 'ding_item_viewer.tabs',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_viewer_admin_form'] = array(
    'render element' => 'form',
  );

  return $hooks;
}

/**
 * Implements hook_block_info().
 */
function ding_item_viewer_block_info() {
  $blocks = array();

  $blocks['item_viewer'] = array(
    'info' => t('Ding item viewer')
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ding_item_viewer_block_view($delta) {
  $block = array();
  $block['content'] = '';

  switch ($delta) {
    case 'item_viewer':
      drupal_add_css(drupal_get_path('module', 'ding_item_viewer') . '/css/ding_item_viewer.styles.css');
      $tabs = ding_item_viewer_build_tabs();
      ding_item_viewer_build_data();
      $block['content'] = theme('item_viewer_content', array('tabs' => $tabs));
      break;
  }

  return $block;
}

/**
 * Build tabs for item viewer.
 *
 * @return
 *   Tabs layout markup.
 */
function ding_item_viewer_build_tabs() {
  $queries = variable_get('ding_item_viewer_search_queries');

  $tabs = '';

  if (is_array($queries)) {
    foreach ($queries as $k => $query) {
      $tabs .= theme('item_viewer_tab_single', array('tab_index' => $k, 'tab_title' => $query['title']));
    }
  }

  return theme('item_viewer_tabs', array('tabs' => $tabs));
}

/**
 * Build ting related data.
 *
 * This entry fetches all needed objects and outputs the result as a json string
 * into JS script for further use.
 */
function ding_item_viewer_build_data() {
  $queries = variable_get('ding_item_viewer_search_queries');
  $count = variable_get('ding_item_viewer_item_limit', 24);
  $ttl = variable_get('ding_item_viewer_cache_ttl', 1);
  $output = array();

  foreach ($queries as $query) {
    $cid = ding_item_viewer_generate_cache_id($query['query']);
    $cache = cache_get($cid);
    if (!$cache) {
      $response = ding_item_viewer_get_objects($query['query'], $count);
      $output[] = $response;
      cache_set($cid, $response, 'cache', time() + $ttl * 3600);
    }
    else {
      $output[] = $cache->data;
    }
  }

  drupal_add_js(drupal_get_path('module', 'ding_item_viewer') . '/js/ding_item_viewer.viewer.js');
  drupal_add_js(array('ding_item_viewer' => array('ting_objects' => drupal_json_encode($output))), 'setting');
}

/**
 * Get ting objects.
 *
 * @param $query
 *   Search query string.
 * @param $count
 *   Number of objects to search.
 */
function ding_item_viewer_get_objects($query = '', $count = 0, $no_cover = FALSE) {
  $objects = array();
  $request = '(' . $query . ')';
  $page = 1;

  if (!empty($query) && !empty($count)) {
    module_load_include('client.inc', 'ting');
    // Search with portions of 10 items
    while ($result = ding_item_viewer_search_ting($request, $page++, 10)) {
      // This query is out of results OR we have needed amount of items
      if ($result->numTotalCollections == 0 || count($objects) == $count) {
        break;
      }

      foreach ($result->collections as $collection) {
        // Whether we reached our item limit per query
        if (count($objects) == $count) {
          break;
        }

        foreach ($collection->reply->objects as $searchItem) {
          // No cover for this item? Skip it!
          try {
            $cover_exists = ding_item_viewer_check_cover($searchItem->localId);
          }
          catch (Exception $e) {
            return FALSE;
          }

          if (!$cover_exists && !$no_cover) {
            break;
          }

          $item = new stdClass();
          $item->primary_object = $collection->primary_object;
          $item->id = $searchItem->id;
          $item->isbn = isset($searchItem->record['dc:identifier']['dkdcplus:ISBN'][0]) ?
                        $searchItem->record['dc:identifier']['dkdcplus:ISBN'][0] : NULL;
          $item->ac_source = isset($searchItem->record['ac:source'][''][0]) ?
                              $searchItem->record['ac:source'][''][0] : NULL;
          $item->dc_source = isset($searchItem->record['dc:source'][''][0]) ?
                              $searchItem->record['dc:source'][''][0] : NULL;
          $item->title = $searchItem->record['dc:title'][''][0];

          if (isset($searchItem->record['dc:creator'])) {
            if (isset($searchItem->record['dc:creator']['oss:aut'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:aut'][0];
            }
            elseif (isset($searchItem->record['dc:creator']['oss:mus'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:mus'][0];
            }
            elseif (isset($searchItem->record['dc:creator']['oss:sort'][0])) {
              $item->creator = $searchItem->record['dc:creator']['oss:sort'][0];
            }
            else {
              $item->creator = NULL;
            }
          }
          else {
            $item->creator = NULL;
          }

          if (isset($searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0])) {
            $item->subject = $searchItem->record['dc:subject']['dkdcplus:DK5-Text'][0];
          }
          elseif (isset($searchItem->record['dc:subject']['oss:genre'][0])) {
            $item->subject = $searchItem->record['dc:subject']['oss:genre'][0];
          }
          elseif (isset($searchItem->record['dc:subject'][''][0])) {
            $item->subject = $searchItem->record['dc:subject'][''][0];
          }
          else {
            $item->subject = NULL;
          }

          // Set image filepath.
          // Image existence will be checked further.
          $item->image = file_create_url(ting_covers_object_path($searchItem->localId));

          if (isset($searchItem->record['dc:description'][''][0])) {
            $item->description = $searchItem->record['dc:description'][''][0];
          }
          elseif (isset($searchItem->record['dcterms:abstract'][''][0])) {
            $item->description = $searchItem->record['dcterms:abstract'][''][0];
          }
          elseif (isset($searchItem->record['dcterms:hasPart'])) {
            $item->description = $searchItem->record['dcterms:hasPart']['oss:track'];
          }
          else {
            $item->description = '';
          }

          $item->year = isset($searchItem->record['dc:date'][''][0]) ?
                          $searchItem->record['dc:date'][''][0] : NULL;
          // Default values
          $item->type = 1;
          $item->rating = 0;
          $item->rating_count = 0;
          $item->comment_count = 0;

          $objects[$searchItem->localId] = $item;
          break;
        }
      }
    }

    // Make an array of local id's, fetchable by voxb
    if (module_exists('ding_voxb')) {
      $local_ids = array();
      foreach ($objects as $k => $v) {
        $local_ids[] = $k;
      }

      // Fetch details from voxb
      $voxb_details = new VoxbItems();
      $voxb_details->addReviewHandler('review', new VoxbReviews());
      $response = $voxb_details->fetchByFaust($local_ids);

      // Assign voxb details to items
      if ($response) {
        $c = $voxb_details->getCount();
        if ($c > 0) {
          for ($i = 0; $i < $c; $i++) {
            $detail = $voxb_details->getItem($local_ids[$i]);
            $items[$local_ids[$i]]->rating = (int) round($detail->getRating() / 20);
            $items[$local_ids[$i]]->rating_count = $detail->getRatingCount();
            $items[$local_ids[$i]]->comment_count = $detail->getReviews('review')->getCount();
          }
        }
      }
    }

    try {
      ding_item_viewer_create_missed_covers($objects);
    }
    catch (Exception $e) {
      return FALSE;
    }
  }

  return $objects;
}

/**
 * Perform ting search.
 *
 * @param $query
 *   Searched query string.
 * @param $page
 *   Requested results page.
 * @param $records
 *   Number of records to fetch.
 * @return
 *   Ting search result object.
 */
function ding_item_viewer_search_ting($query = '', $page = 1, $records = 10) {
  if (!empty($query)) {
    $query = '(' . $query . ')';

    $options = array(
      'allObjects' => FALSE,
      'enrich' => TRUE,
    );

    $search_result = ting_do_search($query, $page, $records, $options);

    return $search_result;
  }

  return FALSE;
}

/**
 * Check for cover existence.
 *
 * @param $local_id
 *   Ting item local id.
 * @return
 *   TRUE if item has a cover, FALSE otherwise.
 */
function ding_item_viewer_check_cover($local_id) {
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));

  $cover = $service->getByFaustNumber($local_id);

  if (count($cover) > 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Create missed covers.
 *
 * @param $items
 *   Set of ting objects.
 */
function ding_item_viewer_create_missed_covers(&$items) {
  foreach ($items as $item_id => $item) {
    if (!file_exists($item->image)) {
      $missing_images_ids[] = $item_id;
    }
  }

  if (!empty($missing_images_ids)) {
    ding_item_viewer_get_images_from_addi($items, $missing_images_ids);
  }
}

/**
 * Get images from ADDI web-service.
 *
 * @param $items
 *   Set of ting objects.
 * @param $missing_images_local_ids
 *   Array of ting items id's with missing covers.
 * @return
 *   Set of ting objects, with image path attached.
 */
function ding_item_viewer_get_images_from_addi(&$items, $missing_images_local_ids) {
  require_once drupal_get_path('module', 'ting_covers') . '/ting_covers.pages.inc';
  $service = new AdditionalInformationService(variable_get('addi_wsdl_url'), variable_get('addi_username'), variable_get('addi_group'), variable_get('addi_password'));

  try {
    // Local ids = Faust numbers. Library object identifiers can be confusing...
    $additional_informations = $service->getByFaustNumber($missing_images_local_ids);
  }
  catch (Exception $e) {
    return;
  }

  foreach ($missing_images_local_ids as $local_id) {
    // Try to extract the image url from the result
    $source_url = FALSE;
    if (isset($additional_informations[$local_id]) && $ai = $additional_informations[$local_id]) {
      if ($ai->detailUrl) {
        $source_url = $ai->detailUrl;
      }
      elseif ($ai->thumbnailUrl) {
        $source_url = $ai->thumbnailUrl;
      }
    }

    // Try to download the image locally
    $file = _ting_covers_pages_fetch_image(ting_covers_object_path($local_id), $source_url);

    if ($file) {
      //Generate a path corresponding to the downloaded image, styled
      $items[$local_id]->image = file_create_url($file->uri);
    }
    else {
      // @todo
      // Some default image perhaps.
      $items[$local_id]->image = '';
    }
  }
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param $keyword
 *   A generic keyword.
 * @return
 *   Hash string, meaning a certain cache id.
 */
function ding_item_viewer_generate_cache_id($keyword) {
  return 'ding_item_viewer-' . md5($keyword);
}
